.. _exam01:

==============
問題1(exam1)
==============

問題1は、前期までの期末試験に近いスタイルで記述しています。
この時点で実行に至れない場合、前期の基本中の基本すらできていない可能性があるため、重症と考えられます。

.. literalinclude:: code/src/exam01/Mondai.md
    :language: markdown

:code:`exam01.Ex1` クラス自体は既に存在しているため、中に必要とされるものを実装するだけです。
求められているものは、全てフィールドとなっています。
また、 **範囲はpublic** と明言されているので、公開フィールドとして :code:`public` も宣言しておく必要があります。よって実際のコードとしては以下のようになります。

.. literalinclude:: code/src/exam01/Ex1.java
    :language: java
    :emphasize-lines: 8-10

ネームスペース(名前空間)
====================================

ここでついでに覚えておかないといけないのが、Javaにおけるクラスと **ネームスペース(名前空間)** です。
Javaも含めて、あらゆる言語において明示・暗黙いずれかの形でこの考え方は存在します。

たとえば、 :code:`List` というクラスを考えてみます。「リスト」という表現は何かのデータを複数まとめて並べたものとして一般化されています。しかし、この考え方は一般化されているが故に混乱を招くこともあります。

- データの並びとしてのリスト
- UI(ウィンドウ)上で存在する複数のコンポーネント(部品)を並べるコンテナ

どちらも意味合いとして :code:`List` を使いたいのですが、お互いに譲り合って `DataList` と `UIList` とするのは、とりあえずは可能であったとしても、後続の同様の趣旨を持つ `List` が皆名前を変えていかないといけないため非常に面倒になってしまいます。

そこで **なんのための :code:`List` なのか** を表現するために、Javaでは **パッケージ** (package)という概念を導入しています。
パッケージはいわば「〜の」という表現をサポートするために存在しています。

- データの並びとしてのリスト → :code:`java.util.List`
- UI(ウィンドウ)上で存在する複数のコンポーネント(部品)を並べるコンテナ → :code:`java.awt.List`

こうすることで、同じ :code:`List` という単語を使っていても、所属している空間が違うので別のものであるとできます。
大雑把には同じ「大輔」でも、「佐藤」さんの大輔と「伊藤」さんの大輔は別物ですよ、というのと同じと思えればそれでかまいません。

Javaにおいては、パッケージとクラス名に関しては以下の取り決めが求められます。

- パッケージ名は小文字のみで記述(:code:`java.util`)
- クラス名はラージキャメルで記述(:code:`List`)

完全な名前は「属するパッケージ空間」+「クラス名」で表現するため、 :code:`java.util.List` クラスというのが本来の :code:`List` クラスの名前となります。
でも、いちいち完全な名前で書くのは面倒なので、楽をするための仕組みがいくつか提供されています。

- :code:`java.util` パッケージ空間のクラス名は暗黙のインポート処理が行われており、明示しなくてもパッケージ空間に存在するクラス名・パッケージ空間名は相対表記可能です
    - つまりいちいち書かなくても :code:`List` のみで通じる
- 暗黙のインポートがなされないクラスであっても、 :code:`import` 命令により指定のクラスの事前インポートが可能です
    - :code:`import java.awt.List` でコード内の :code:`List` クラスは :code:`java.awk.List` と解釈される
    - :code:`import java.awk.*` とすると、いわゆるワイルドカードの認識となり、 :code:`java.awt` 空間に存在する全てのシンボル(クラスやパッケージ)がインポートされた状態になる
        - ただしコンパイル時や実行時に該当する空間以下を全てスキャンする可能性があるため、実行前の準備に時間を取られる可能性があり、あまり推奨されません

クラス名とパッケージ空間
================================

クラスは、作成することでどこかのパッケージ空間に属しますが、教科書(問題集)を使っていると、特にどこに属するかを明示していません。
このとき、 **デフォルトパッケージ空間** というものに属しているとされます。これは、JavaVM(実行環境)が認識するクラスの状況からすれば **根っこにただ置かれているだけ** という扱いになります。

.. figure:: images/01-classtree.drawio.png

    デフォルトではパッケージ階層のルート要素となってしまう

これを防ぐためには、属するパッケージ空間をきちんと明示する必要があります。
そのために使うのが :code:`package` キーワードです。

.. literalinclude:: code/src/exam01/Ex1.java
    :language: java
    :emphasize-lines: 4

こうすることで、このクラスは :code:`exam01.Ex1` となります。
よって、他のところで同じクラス名を使うことがあってもパッケージ階層を分けていれば衝突が発生しなくなります。
また、Javaのソースコードを配置する際にも、パッケージ空間をディレクトリとみなして配置する必要もあります(`exam01` ディレクトリ内に `Ex1.java` ファイルを作成し、 :code:`exam01.Ex1` クラスを作成)。

Eclipseとクラス・パッケージ
===========================================

Javaをサポートしている開発環境(IDE)では、パッケージ名とクラス名を適宜設定できるようになっています。

.. figure:: images/02-newclass.png

    Eclipseでの新規クラス作成、パッケージ名が設定できる

.. figure:: images/03-newclass-result.png

    生成されるクラスのテンプレート

他のIDEにしても、クラス名・パッケージ名を認識した挙動を取るようになっています。
